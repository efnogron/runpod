# -*- coding: utf-8 -*-
"""Tiro + Llama-3 8b Finetune 070524.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1O9-lasIK4n5RCfnk5WOAm-4VRddEb8IV

This Colab finetunes to the OG-Tiro Llama3dumbbabytiro repository.
"""

# Commented out IPython magic to ensure Python compatibility.
# %%capture
# # Installs Unsloth, Xformers (Flash Attention) and all other packages
# !pip install "unsloth[colab-new] @ git+https://github.com/unslothai/unsloth.git"
# !pip install --no-deps "xformers<0.0.26" trl peft accelerate bitsandbytes
# 
# #high RAM not necessary for 8b models, maybe for 70b?
# from psutil import virtual_memory
# ram_gb = virtual_memory().total / 1e9
# print('Your runtime has {:.1f} gigabytes of available RAM\n'.format(ram_gb))
# 
# if ram_gb < 20:
#   print('Not using a high-RAM runtime')
# else:
#   print('You are using a high-RAM runtime!')

from unsloth import FastLanguageModel
import torch
max_seq_length = 4096 # automatically does RoPE Scaling internally, can choose any value
dtype = None # None for auto detection. Float16 for Tesla T4, V100, Bfloat16 for Ampere+
#load_in_4bit = False # Use 4bit quantization to reduce memory usage. Can be False.
load_in_8bit = True

# 4bit pre quantized models we support for 4x faster downloading + no OOMs.
fourbit_models = [
    "unsloth/mistral-7b-bnb-4bit", # useless
    "unsloth/llama-3-70b-bnb-4bit",
    "unsloth/llama-3-8b-bnb-4bit", #
] # More models at https://huggingface.co/unsloth


model, tokenizer = FastLanguageModel.from_pretrained(
    #model_name = "unsloth/llama-3-8b-bnb-4bit",
    model_name = "unsloth/llama-3-8b", # 8 Bit version
    #model_name = "unsloth/llama-3-70b-bnb-4bit",
    #model_name = "unsloth/llama-3-70b",
    max_seq_length = max_seq_length,
    dtype = dtype,
    #load_in_4bit = load_in_4bit, # i guess this must be changed to load in 8 bit?
    #load_in_8bit = load_in_8bit
    # token = "hf_...", # use one if using gated models like meta-llama/Llama-2-7b-hf
)

print("Model and tokenizer successfully loaded.")
print("Model architecture:", model)

"""We now add LoRA adapters so we only need to update 1 to 10% of all parameters!"""

model = FastLanguageModel.get_peft_model(
    model,
    r = 16, # Choose any number > 0 ! Suggested 8, 16, 32, 64, 128
    target_modules = ["q_proj", "k_proj", "v_proj", "o_proj",
                      "gate_proj", "up_proj", "down_proj",],
    lora_alpha = 16,
    lora_dropout = 0, # Supports any, but = 0 is optimized
    bias = "none",    # Supports any, but = "none" is optimized
    # [NEW] "unsloth" uses 30% less VRAM, fits 2x larger batch sizes!
    use_gradient_checkpointing = "unsloth", # True or "unsloth" for very long context
    random_state = 3407,
    use_rslora = False,  # We support rank stabilized LoRA
    loftq_config = None, # And LoftQ
)

tiro_prompt = """
### Instruction:
{instruction}

### Here is the original:
{question}

### Answer:
{answer}

### Extra Information:
{extra}

### User Input:
{input}

### Expected Response:
{output}
"""

EOS_TOKEN = tokenizer.eos_token # Must add EOS_TOKEN


def formatting_prompts_func(examples):
    instructions = examples["instruction"]
    questions = examples["question"]
    answers = examples["answer"]
    extras = examples["extra"]
    inputs = examples["input"]
    outputs = examples["output"]
    texts = []

    for instruction, question, answer, extra, input, output in zip(instructions, questions, answers, extras, inputs, outputs):
        # Fill the template with data from the dataset
        text = tiro_prompt.format(
            instruction=instruction,
            question=question,
            answer=answer,
            extra=extra,
            input=input,
            output=output
        ) + EOS_TOKEN  # Add EOS token to mark the end of the text
        texts.append(text)

    return {"text": texts}
pass

from datasets import load_dataset
dataset = load_dataset("OG-Tiro/Finetune_Evaluate_Answer", token="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", split="train")
dataset = dataset.map(formatting_prompts_func, batched = True,)


from trl import SFTTrainer
from transformers import TrainingArguments

trainer = SFTTrainer(
    model = model,
    tokenizer = tokenizer,
    train_dataset = dataset,
    dataset_text_field = "text",
    max_seq_length = max_seq_length,
    dataset_num_proc = 2,
    packing = False, # Can make training 5x faster for short sequences.
    args = TrainingArguments(
        per_device_train_batch_size = 2,
        gradient_accumulation_steps = 4,
        warmup_steps = 5,
        max_steps = 60, # will override epochs if max steps is given
        learning_rate = 2e-4,
        fp16 = not torch.cuda.is_bf16_supported(),
        bf16 = torch.cuda.is_bf16_supported(),
        logging_steps = 1,
        optim = "adamw_8bit",
        weight_decay = 0.01,
        lr_scheduler_type = "linear",
        seed = 3407,
        output_dir = "outputs",
    ),
)

#Show current memory stats
gpu_stats = torch.cuda.get_device_properties(0)
start_gpu_memory = round(torch.cuda.max_memory_reserved() / 1024 / 1024 / 1024, 3)
max_memory = round(gpu_stats.total_memory / 1024 / 1024 / 1024, 3)
print(f"GPU = {gpu_stats.name}. Max memory = {max_memory} GB.")
print(f"{start_gpu_memory} GB of memory reserved.")

trainer_stats = trainer.train()

#Show final memory and time stats
used_memory = round(torch.cuda.max_memory_reserved() / 1024 / 1024 / 1024, 3)
used_memory_for_lora = round(used_memory - start_gpu_memory, 3)
used_percentage = round(used_memory         /max_memory*100, 3)
lora_percentage = round(used_memory_for_lora/max_memory*100, 3)
print(f"{trainer_stats.metrics['train_runtime']} seconds used for training.")
print(f"{round(trainer_stats.metrics['train_runtime']/60, 2)} minutes used for training.")
print(f"Peak reserved memory = {used_memory} GB.")
print(f"Peak reserved memory for training = {used_memory_for_lora} GB.")
print(f"Peak reserved memory % of max memory = {used_percentage} %.")
print(f"Peak reserved memory for training % of max memory = {lora_percentage} %.")

#!huggingface-cli login #hier muss der huggingface WRITE token rein sonst gehts net

model.save_pretrained("_model") # Local saving
tokenizer.save_pretrained("Llama3dumbbabytiro")
model.push_to_hub("OG-Tiro/Llama3dumbbabytiro", token = "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") # Online saving
tokenizer.push_to_hub("OG-Tiro/Llama3dumbbabytiro", token = "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") # Online saving

"""Now if you want to load the LoRA adapters we just saved for inference, set `False` to `True`:"""

#skip this, this is only for local interference
if True:  # This should be set to True if you want to execute this block
    from unsloth import FastLanguageModel
    model, tokenizer = FastLanguageModel.from_pretrained(
        model_name="Llama3dumbbabytiro",  # Updated to your model's name
        max_seq_length=4096,  # Example value, set this as per your model's training config
        dtype=None,  # Adjust based on your hardware capabilities
        load_in_4bit=False,  # Set according to your model's quantization settings
    )
    FastLanguageModel.for_inference(model)

# Update this to your actual prompt format
tiro_prompt = """
### Instruction:
{instruction}

### Question:
{question}

### Correct Answer:
{answer}

### Extra Information:
{extra}

### User Input:
{input}

### Expected Response:
{output}
"""

# Example data to format the prompt
sample_data = {
    "instruction": "Identify the landmark based on the description.",
    "question": "What is a famous tall tower in Paris?",
    "answer": "Eiffel Tower",
    "extra": "It was constructed as the entrance to the 1889 World's Fair.",
    "input": "",
    "output": ""  # Leave output blank for generation
}

inputs = tokenizer(
    [
        tiro_prompt.format(**sample_data)
    ], return_tensors="pt").to("cuda")

outputs = model.generate(**inputs, max_new_tokens=64, use_cache=True)
decoded_responses = tokenizer.batch_decode(outputs, skip_special_tokens=True)

for response in decoded_responses:
    print(response)

"""### Saving to float16 for VLLM

We also support saving to `float16` directly. Select `merged_16bit` for float16 or `merged_4bit` for int4. We also allow `lora` adapters as a fallback. Use `push_to_hub_merged` to upload to your Hugging Face account! You can go to https://huggingface.co/settings/tokens for your personal tokens.
"""

# Merge to 16bit
if True: model.save_pretrained_merged("Llama3dumbbabytiro", tokenizer, save_method = "merged_16bit",)
if True: model.push_to_hub_merged("Llama3dumbbabytiro", tokenizer, save_method = "merged_16bit", token = "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") #highest available quality

# Merge to 4bit
if False: model.save_pretrained_merged("model", tokenizer, save_method = "merged_4bit",)
if False: model.push_to_hub_merged("hf/model", tokenizer, save_method = "merged_4bit", token = "")

# Just LoRA adapters
if False: model.save_pretrained_merged("model", tokenizer, save_method = "lora",)
if False: model.push_to_hub_merged("hf/model", tokenizer, save_method = "lora", token = "")

"""### GGUF / llama.cpp Conversion
To save to `GGUF` / `llama.cpp`, we support it natively now! We clone `llama.cpp` and we default save it to `q8_0`. We allow all methods like `q4_k_m`. Use `save_pretrained_gguf` for local saving and `push_to_hub_gguf` for uploading to HF.

Some supported quant methods (full list on our [Wiki page](https://github.com/unslothai/unsloth/wiki#gguf-quantization-options)):
* `q8_0` - Fast conversion. High resource use, but generally acceptable.
* `q4_k_m` - Recommended. Uses Q6_K for half of the attention.wv and feed_forward.w2 tensors, else Q4_K.
* `q5_k_m` - Recommended. Uses Q6_K for half of the attention.wv and feed_forward.w2 tensors, else Q5_K.
"""

# Save to 8bit Q8_0
if False: model.save_pretrained_gguf("model", tokenizer,)
if False: model.push_to_hub_gguf("hf/model", tokenizer, token = "")

# Save to 16bit GGUF
if False: model.save_pretrained_gguf("model", tokenizer, quantization_method = "f16")
if False: model.push_to_hub_gguf("hf/model", tokenizer, quantization_method = "f16", token = "")

# Save to q4_k_m GGUF
if False: model.save_pretrained_gguf("model", tokenizer, quantization_method = "q4_k_m")
if False: model.push_to_hub_gguf("hf/model", tokenizer, quantization_method = "q4_k_m", token = "")

"""Now, use the `model-unsloth.gguf` file or `model-unsloth-Q4_K_M.gguf` file in `llama.cpp` or a UI based system like `GPT4All`. You can install GPT4All by going [here](https://gpt4all.io/index.html)."""